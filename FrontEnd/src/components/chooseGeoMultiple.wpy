<template>
  <view class="zan-popup__mask" style='display: block;z-index: 0'></view>
  <view class='popSize'>
    <view class="flex3">
      <view class="zan-panel flex3Item">
        <repeat for="{{province}}">
          <view class="zan-cell zan-cell--access {{selectedItem[0]==index?'selected':''}}" @tap='tapProvince({{item.id}},{{index}})'>
            <view class="zan-cell__bd">{{item.shortName}}</view>
          </view>
        </repeat>
      </view>
      <view class="zan-panel flex3Item" wx:if="{{city.length}}">
        <repeat for="{{city}}">
          <view class="zan-cell zan-cell--access {{selectedItem[1]==index?'selected':''}}" @tap='tapCity({{item.id}},{{index}})'>
            <view class="zan-cell__bd">{{item.shortName}}</view>
          </view>
        </repeat>
      </view>
      <view class="zan-panel flex3Item" wx:if="{{district.length}}">
        <repeat for="{{district}}">
          <view class="zan-cell zan-cell--access {{selectedDistrictItem[item.id]?'selected':''}}" @tap='tapDistrict({{item}})'>
            <view class="zan-cell__bd">{{item.shortName}}</view>
          </view>
        </repeat>
      </view>
    </view>
    <view class="zan-dialog__footer zan-dialog__footer--horizon" style='margin: -55px 10px 10px 10px'>
      <button class="zan-btn zan-btn--primary" @tap="confirmDistrictChoose" style="width: 100%;">确定</button>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import http from '../utils/http.js'
export default class ChooseGeo extends wepy.component {
  config = {
    navigationBarTitleText: 'dev nav',
    enablePullDownRefresh: true,
    backgroundTextStyle: 'dark',
    backgroundColor: '#ffffff'
  }

  data = {
    province: [],
    city: [],
    district: [],
    selectedItem: [],
    selectedDistrictItem: {}
  }
  props={
    multiple:{
      type: String,
      default: 1
    }
  }
  methods = {

    tapProvince(id, index) {
      console.log('tapProvince=> ', index)
      this.selectedItem[0] = index
      this.selectedItem[1] = null
      this.selectedItem[2] = null

      this.district.length = 0
      this.fetchCity(id)
    },
    tapCity(id, index) {
      //console.log(e,this)
      this.selectedItem[1] = index
      this.selectedItem[2] = null
      this.fetchDistrict(id)
    },
    tapDistrict(item) {
      console.log(this.multiple,'----')
      if(this.multiple==0){
        this.selectedDistrictItem={
          [item.id]:item
        }
        return;
      }
      if (this.selectedDistrictItem[item.id]) {
        delete this.selectedDistrictItem[item.id]
      } else {
        this.selectedDistrictItem[item.id] = item
      }

    },
    confirmDistrictChoose() {
      let choosedGeo = {
        province: this.province[this.selectedItem[0]],
        city: this.city[this.selectedItem[1]],
        district: this.selectedDistrictItem, //Object.keys(this.selectedDistrictItem).toString()
      }
      //console.log('选择了=> ',this.province[this.selectedItem[0]],this.city[this.selectedItem[1]],this.district[this.selectedItem[2]])
      let evt='choosedGeo'
      if(this.multiple == 0){
        evt='choosedGeo2'
      }
      this.$emit(evt, choosedGeo)
    }
  };

  fetchProvince(e) {
    const _this = this
    // console.log('this=>',this)
    http.get('/user/province')
      .success(res => {
        this.province = res.data
        //console.log(this)
        this.$apply()
      })
  }

  fetchCity(e) {
    const _this = this
    // console.log('this=>',this)
    http.get('/user/city', { parentId: e })
      .success(res => {
        this.city = res.data
        //console.log(this)
        this.$apply()
      })
  }

  fetchDistrict(e) {
    const _this = this
    // console.log('this=>',this)
    http.get('/user/district', { parentId: e })
      .success(res => {
        this.district = res.data
        //console.log(this)
        this.$apply()
      })
  }

  onLoad(e) {
    //console.log(this,e)
    this.fetchProvince()
  }
}

</script>
<style lang="less">
.selected {
  background: #f0f0f0;
  color:rgb(30,70,200);
}
.popSize{
  position: fixed;
  left: 10%;
  top: 10%;
  right: 10%;
  bottom: 10%;
  z-index: 999;
  background: #fff;
}
.flex3 {
  display: flex;
  height: 100%;
  margin-left: 10px;
  .flex3Item {
    flex: 1 1 auto;
    border-left: 1px solid #f0f0f0;
    overflow-y: scroll;
  }
}

</style>
